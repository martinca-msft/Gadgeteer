<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" hostspecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ GadgeteerDSL processor="GadgeteerDslDirectiveProcessor" requires="fileName='%MODELFILENAME%'" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>

<#
IServiceProvider serviceProvider = (IServiceProvider)this.Host;
this.GadgeteerModel.GenerateUsingsInUserCode(serviceProvider, @"%CLASSFILENAME%.cs");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Gadgeteer Designer.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Gadgeteer;
using <#= Microsoft.Gadgeteer.Designer.Module.GadgeteerModuleRootNamespaceAlias #> = <#= Microsoft.Gadgeteer.Designer.Module.GadgeteerModuleRootNamespace#>;

namespace %PROJECTNAMESPACE%
{
    public partial class %CLASSNAME% : Gadgeteer.Program
    {
        // GTM.Module definitions
<#

  foreach (Module m in this.GadgeteerModel.Modules)
  {
#>
        <#= m.ModuleType #> <#= m.Name #>;
<#   
  }
#>

        public static void Main()
        {
            //Important to initialize the Mainboard first
<# if(this.GadgeteerModel.Mainboard!=null)
{ 
#>
            Mainboard = new <#= this.GadgeteerModel.Mainboard.MainboardDefinitionTypeName #>();			
<#
} 
else
{
#>
            #error Please add a mainboard in the Gadgeteer Designer
<# 
} 
#>

            Program program = new Program();
            program.InitializeModules();
            program.ProgramStarted();
            program.Run(); // Starts Dispatcher
        }

        private void InitializeModules()
        {   
            // Initialize GTM.Modules and event handlers here.<#

    var modules = this.GadgeteerModel.SortModulesInCodeGenerationOrder();
    foreach (Module m in modules)
    {
        if(m.Connected)
        {
#>		
            <#= m.Name #> = new <#= m.AliasedTypeName#>(<#= m.GenerateConstructorString() #>);
<#    
        }
    }
#>

        }
    }
}
