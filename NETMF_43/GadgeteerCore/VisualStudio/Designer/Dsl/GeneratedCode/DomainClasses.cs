//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// Double-derived base class for DomainClass GadgeteerModel
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerModel.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerModel.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("15ee651a-ee3e-4113-813d-0b14e94d5998")]
	public abstract partial class GadgeteerModelBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GadgeteerModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x15ee651a, 0xee3e, 0x4113, 0x81, 0x3d, 0x0b, 0x14, 0xe9, 0x4d, 0x59, 0x98);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected GadgeteerModelBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NewModel domain property code
		
		/// <summary>
		/// NewModel domain property Id.
		/// </summary>
		public static readonly global::System.Guid NewModelDomainPropertyId = new global::System.Guid(0x645f6ed3, 0x7e77, 0x47d5, 0xa6, 0x8a, 0x32, 0x48, 0x5c, 0xb4, 0x38, 0xb7);
		
		/// <summary>
		/// Storage for NewModel
		/// </summary>
		private global::System.Boolean newModelPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of NewModel domain property.
		/// Description for Microsoft.Gadgeteer.Designer.GadgeteerModel.New Model
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerModel/NewModel.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerModel/NewModel.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("645f6ed3-7e77-47d5-a68a-32485cb438b7")]
		public global::System.Boolean NewModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return newModelPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NewModelPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the GadgeteerModel.NewModel domain property.
		/// </summary>
		internal sealed partial class NewModelPropertyHandler : DslModeling::DomainPropertyValueHandler<GadgeteerModelBase, global::System.Boolean>
		{
			private NewModelPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the GadgeteerModel.NewModel domain property value handler.
			/// </summary>
			public static readonly NewModelPropertyHandler Instance = new NewModelPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the GadgeteerModel.NewModel domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NewModelDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(GadgeteerModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.newModelPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(GadgeteerModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.newModelPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GadgeteerHardware opposite domain role accessor
		
		/// <summary>
		/// Gets a list of GadgeteerHardware.
		/// Description for
		/// Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<GadgeteerHardware> GadgeteerHardware
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<GadgeteerHardware>, GadgeteerHardware>(global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerModelDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for
		/// Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.GadgeteerModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.GadgeteerModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Gadgeteer.Designer.GadgeteerHardware.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Gadgeteer.Designer.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Gadgeteer.Designer.GadgeteerHardware sourceGadgeteerHardware1 = sourceElement as global::Microsoft.Gadgeteer.Designer.GadgeteerHardware;
			if (sourceGadgeteerHardware1 != null)
			{
				// Create link for path GadgeteerModelHasGadgeteerHardware.GadgeteerHardware
				this.GadgeteerHardware.Add(sourceGadgeteerHardware1);

				return;
			}
				
			global::Microsoft.Gadgeteer.Designer.Comment sourceComment2 = sourceElement as global::Microsoft.Gadgeteer.Designer.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path GadgeteerModelHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Gadgeteer.Designer.GadgeteerHardware sourceGadgeteerHardware1 = sourceElement as global::Microsoft.Gadgeteer.Designer.GadgeteerHardware;
			if (sourceGadgeteerHardware1 != null)
			{
				// Delete link for path GadgeteerModelHasGadgeteerHardware.GadgeteerHardware
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GetLinks((global::Microsoft.Gadgeteer.Designer.GadgeteerModel)this, sourceGadgeteerHardware1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerModelDomainRoleId, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerHardwareDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.Gadgeteer.Designer.Comment sourceComment2 = sourceElement as global::Microsoft.Gadgeteer.Designer.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path GadgeteerModelHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.GetLinks((global::Microsoft.Gadgeteer.Designer.GadgeteerModel)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.GadgeteerModelDomainRoleId, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass GadgeteerModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class GadgeteerModel : GadgeteerModelBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GadgeteerModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GadgeteerModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// Double-derived base class for DomainClass Mainboard
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Mainboard.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Mainboard.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("23b7e991-e611-40e0-a03c-cf96b2f2027e")]
	public abstract partial class MainboardBase : GadgeteerHardware
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Mainboard domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x23b7e991, 0xe611, 0x40e0, 0xa0, 0x3c, 0xcf, 0x96, 0xb2, 0xf2, 0x02, 0x7e);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected MainboardBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xbdd1f61d, 0xc295, 0x43ee, 0x90, 0x05, 0x65, 0xd9, 0xdb, 0x86, 0x1c, 0x2e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Microsoft.Gadgeteer.Designer.Mainboard.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Mainboard/Name.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Mainboard/Name.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("bdd1f61d-c295-43ee-9005-65d9db861c2e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Mainboard.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MainboardBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Mainboard.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Mainboard.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MainboardBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MainboardBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass Mainboard
	/// Description for Microsoft.Gadgeteer.Designer.Mainboard
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Mainboard : MainboardBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Mainboard(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Mainboard(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// Double-derived base class for DomainClass Module
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Module.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Module.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("60921340-ff2d-4314-b24b-55d56be869af")]
	public abstract partial class ModuleBase : GadgeteerHardware
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Module domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x60921340, 0xff2d, 0x4314, 0xb2, 0x4b, 0x55, 0xd5, 0x6b, 0xe8, 0x69, 0xaf);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModuleBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x01757930, 0xf488, 0x42ac, 0x98, 0x2a, 0xb1, 0x0b, 0xf2, 0x83, 0x75, 0x9a);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Microsoft.Gadgeteer.Designer.Module.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Module/Name.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Module/Name.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName(typeof(StartAtTwoNameProvider))]
		[DslModeling::DomainObjectId("01757930-f488-42ac-982a-b10bf283759a")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Module.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Module.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Module.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModuleBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModuleType domain property code
		
		/// <summary>
		/// ModuleType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModuleTypeDomainPropertyId = new global::System.Guid(0x19e586e2, 0x61f9, 0x42dd, 0x9a, 0x92, 0x37, 0x59, 0xd3, 0x11, 0xc3, 0xc1);
		
		/// <summary>
		/// Storage for ModuleType
		/// </summary>
		private global::System.String moduleTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ModuleType domain property.
		/// Description for Microsoft.Gadgeteer.Designer.Module.Module Type
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Module/ModuleType.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Module/ModuleType.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("19e586e2-61f9-42dd-9a92-3759d311c3c1")]
		public global::System.String ModuleType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return moduleTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModuleTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Module.ModuleType domain property.
		/// </summary>
		internal sealed partial class ModuleTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleBase, global::System.String>
		{
			private ModuleTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Module.ModuleType domain property value handler.
			/// </summary>
			public static readonly ModuleTypePropertyHandler Instance = new ModuleTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Module.ModuleType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModuleTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModuleBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.moduleTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.moduleTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModuleDefinitionId domain property code
		
		/// <summary>
		/// ModuleDefinitionId domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModuleDefinitionIdDomainPropertyId = new global::System.Guid(0xcf93e9a7, 0xfc2d, 0x446e, 0x8e, 0x9f, 0x73, 0x0c, 0x8b, 0x21, 0x4a, 0x43);
		
		/// <summary>
		/// Storage for ModuleDefinitionId
		/// </summary>
		private global::System.Guid moduleDefinitionIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ModuleDefinitionId domain property.
		/// Description for Microsoft.Gadgeteer.Designer.Module.Module Definition Id
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Module/ModuleDefinitionId.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Module/ModuleDefinitionId.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("cf93e9a7-fc2d-446e-8e9f-730c8b214a43")]
		public global::System.Guid ModuleDefinitionId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return moduleDefinitionIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModuleDefinitionIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Module.ModuleDefinitionId domain property.
		/// </summary>
		internal sealed partial class ModuleDefinitionIdPropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleBase, global::System.Guid>
		{
			private ModuleDefinitionIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Module.ModuleDefinitionId domain property value handler.
			/// </summary>
			public static readonly ModuleDefinitionIdPropertyHandler Instance = new ModuleDefinitionIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Module.ModuleDefinitionId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModuleDefinitionIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(ModuleBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.moduleDefinitionIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleBase element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.moduleDefinitionIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NetMicroFrameworkAssembly domain property code
		
		/// <summary>
		/// NetMicroFrameworkAssembly domain property Id.
		/// </summary>
		public static readonly global::System.Guid NetMicroFrameworkAssemblyDomainPropertyId = new global::System.Guid(0x473d00d5, 0x232d, 0x401c, 0xa9, 0x7b, 0x72, 0x96, 0x40, 0x30, 0x26, 0xab);
		
		/// <summary>
		/// Storage for NetMicroFrameworkAssembly
		/// </summary>
		private global::System.String netMicroFrameworkAssemblyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NetMicroFrameworkAssembly domain property.
		/// Description for Microsoft.Gadgeteer.Designer.Module.Net Micro Framework Assembly
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Module/NetMicroFrameworkAssembly.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Module/NetMicroFrameworkAssembly.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("473d00d5-232d-401c-a97b-7296403026ab")]
		public global::System.String NetMicroFrameworkAssembly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return netMicroFrameworkAssemblyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NetMicroFrameworkAssemblyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Module.NetMicroFrameworkAssembly domain property.
		/// </summary>
		internal sealed partial class NetMicroFrameworkAssemblyPropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleBase, global::System.String>
		{
			private NetMicroFrameworkAssemblyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Module.NetMicroFrameworkAssembly domain property value handler.
			/// </summary>
			public static readonly NetMicroFrameworkAssemblyPropertyHandler Instance = new NetMicroFrameworkAssemblyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Module.NetMicroFrameworkAssembly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NetMicroFrameworkAssemblyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModuleBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.netMicroFrameworkAssemblyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.netMicroFrameworkAssemblyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Manufacturer domain property code
		
		/// <summary>
		/// Manufacturer domain property Id.
		/// </summary>
		public static readonly global::System.Guid ManufacturerDomainPropertyId = new global::System.Guid(0x939635ec, 0xc7db, 0x49a1, 0x90, 0x30, 0xc0, 0x36, 0xa7, 0x90, 0xd1, 0xeb);
		
		/// <summary>
		/// Gets or sets the value of Manufacturer domain property.
		/// Description for Microsoft.Gadgeteer.Designer.Module.Manufacturer
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Module/Manufacturer.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Module/Manufacturer.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("939635ec-c7db-49a1-9030-c036a790d1eb")]
		public global::System.String Manufacturer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ManufacturerPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Module.Manufacturer domain property.
		/// </summary>
		internal sealed partial class ManufacturerPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ModuleBase, global::System.String>
		{
			private ManufacturerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Module.Manufacturer domain property value handler.
			/// </summary>
			public static readonly ManufacturerPropertyHandler Instance = new ManufacturerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Module.Manufacturer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ManufacturerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModuleBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Manufacturer because its Kind is
				// set to Calculated. Please provide the GetManufacturerValue()
				// method on the domain class.
				return element.GetManufacturerValue();
			}
		
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xca3848fd, 0x3599, 0x4b32, 0xa3, 0x80, 0x6e, 0xb5, 0x72, 0xe1, 0xbb, 0x91);
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for Microsoft.Gadgeteer.Designer.Module.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Module/Type.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Module/Type.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("ca3848fd-3599-4b32-a380-6eb572e1bb91")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Module.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<ModuleBase, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Module.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Module.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModuleBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Type because its Kind is
				// set to Calculated. Please provide the GetTypeValue()
				// method on the domain class.
				return element.GetTypeValue();
			}
		
		}
		
		#endregion
		#region SocketUses opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SocketUses.
		/// Description for Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.Module
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SocketUse> SocketUses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SocketUse>, SocketUse>(global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.ModuleDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Gadgeteer.Designer.SocketUse.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Gadgeteer.Designer.SocketUse sourceSocketUse1 = sourceElement as global::Microsoft.Gadgeteer.Designer.SocketUse;
			if (sourceSocketUse1 != null)
			{
				// Create link for path ModuleHasSocketUses.SocketUses
				this.SocketUses.Add(sourceSocketUse1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Gadgeteer.Designer.SocketUse sourceSocketUse1 = sourceElement as global::Microsoft.Gadgeteer.Designer.SocketUse;
			if (sourceSocketUse1 != null)
			{
				// Delete link for path ModuleHasSocketUses.SocketUses
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.GetLinks((global::Microsoft.Gadgeteer.Designer.Module)this, sourceSocketUse1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.ModuleDomainRoleId, global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.SocketUseDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Module
	/// Description for Microsoft.Gadgeteer.Designer.Module
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Module : ModuleBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Module(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Module(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainClass Socket
	/// Description for Microsoft.Gadgeteer.Designer.Socket
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Socket.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Socket.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Label = {labelPropertyStorage})")]
	[DslModeling::DomainObjectId("d01dde38-eb61-4956-9748-e28148f4c398")]
	public partial class Socket : SocketBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Socket domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd01dde38, 0xeb61, 0x4956, 0x97, 0x48, 0xe2, 0x81, 0x48, 0xf4, 0xc3, 0x98);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Socket(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Socket(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Label domain property code
		
		/// <summary>
		/// Label domain property Id.
		/// </summary>
		public static readonly global::System.Guid LabelDomainPropertyId = new global::System.Guid(0x8693394f, 0x427e, 0x4c40, 0xbf, 0xc6, 0xd3, 0x29, 0x6b, 0xa5, 0x06, 0x1b);
		
		/// <summary>
		/// Storage for Label
		/// </summary>
		private global::System.String labelPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Label domain property.
		/// Description for Microsoft.Gadgeteer.Designer.Socket.Label
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Socket/Label.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Socket/Label.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("8693394f-427e-4c40-bfc6-d3296ba5061b")]
		public global::System.String Label
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return labelPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LabelPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Socket.Label domain property.
		/// </summary>
		internal sealed partial class LabelPropertyHandler : DslModeling::DomainPropertyValueHandler<Socket, global::System.String>
		{
			private LabelPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Socket.Label domain property value handler.
			/// </summary>
			public static readonly LabelPropertyHandler Instance = new LabelPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Socket.Label domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LabelDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Socket element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.labelPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Socket element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.labelPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SocketUse opposite domain role accessor
		/// <summary>
		/// Gets or sets SocketUse.
		/// Description for Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.Socket
		/// </summary>
		public virtual SocketUse SocketUse
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketDomainRoleId) as SocketUse;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketDomainRoleId, value);
			}
		}
		#endregion
		#region GadgeteerHardware opposite domain role accessor
		/// <summary>
		/// Gets or sets GadgeteerHardware.
		/// Description for Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.Socket
		/// </summary>
		public virtual GadgeteerHardware GadgeteerHardware
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.SocketDomainRoleId) as GadgeteerHardware;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.SocketDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainClass SocketUse
	/// Description for Microsoft.Gadgeteer.Designer.SocketUse
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.SocketUse.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.SocketUse.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Label = {labelPropertyStorage})")]
	[DslModeling::DomainObjectId("cd8f841a-13ee-4cb9-b810-3874bfd91755")]
	public partial class SocketUse : SocketBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SocketUse domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcd8f841a, 0x13ee, 0x4cb9, 0xb8, 0x10, 0x38, 0x74, 0xbf, 0xd9, 0x17, 0x55);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocketUse(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocketUse(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Label domain property code
		
		/// <summary>
		/// Label domain property Id.
		/// </summary>
		public static readonly global::System.Guid LabelDomainPropertyId = new global::System.Guid(0xe3c88a24, 0x1daf, 0x4d8e, 0x89, 0xb8, 0xef, 0xa8, 0x0a, 0x2a, 0xbe, 0x1d);
		
		/// <summary>
		/// Storage for Label
		/// </summary>
		private global::System.String labelPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Label domain property.
		/// Description for Microsoft.Gadgeteer.Designer.SocketUse.Label
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.SocketUse/Label.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.SocketUse/Label.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("e3c88a24-1daf-4d8e-89b8-efa80a2abe1d")]
		public global::System.String Label
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return labelPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LabelPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SocketUse.Label domain property.
		/// </summary>
		internal sealed partial class LabelPropertyHandler : DslModeling::DomainPropertyValueHandler<SocketUse, global::System.String>
		{
			private LabelPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SocketUse.Label domain property value handler.
			/// </summary>
			public static readonly LabelPropertyHandler Instance = new LabelPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SocketUse.Label domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LabelDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SocketUse element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.labelPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SocketUse element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.labelPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Optional domain property code
		
		/// <summary>
		/// Optional domain property Id.
		/// </summary>
		public static readonly global::System.Guid OptionalDomainPropertyId = new global::System.Guid(0x49bbf2d1, 0xea0c, 0x45fd, 0x9c, 0xd5, 0x7b, 0xd8, 0x02, 0xd3, 0x0e, 0xa4);
		
		/// <summary>
		/// Gets or sets the value of Optional domain property.
		/// Description for Microsoft.Gadgeteer.Designer.SocketUse.Optional
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.SocketUse/Optional.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.SocketUse/Optional.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("49bbf2d1-ea0c-45fd-9cd5-7bd802d30ea4")]
		public global::System.Boolean Optional
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OptionalPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the SocketUse.Optional domain property.
		/// </summary>
		internal sealed partial class OptionalPropertyHandler : DslModeling::CalculatedPropertyValueHandler<SocketUse, global::System.Boolean>
		{
			private OptionalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SocketUse.Optional domain property value handler.
			/// </summary>
			public static readonly OptionalPropertyHandler Instance = new OptionalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SocketUse.Optional domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OptionalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SocketUse element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Optional because its Kind is
				// set to Calculated. Please provide the GetOptionalValue()
				// method on the domain class.
				return element.GetOptionalValue();
			}
		
		}
		
		#endregion
		#region Module opposite domain role accessor
		/// <summary>
		/// Gets or sets Module.
		/// Description for Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.SocketUse
		/// </summary>
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.SocketUseDomainRoleId) as Module;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.SocketUseDomainRoleId, value);
			}
		}
		#endregion
		#region Socket opposite domain role accessor
		/// <summary>
		/// Gets or sets Socket.
		/// Description for Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketUse
		/// </summary>
		public virtual Socket Socket
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketUseDomainRoleId) as Socket;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketUseDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// Double-derived base class for DomainClass GadgeteerHardware
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerHardware.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerHardware.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("75fd3552-c538-45c0-baf6-4555afa08458")]
	public abstract partial class GadgeteerHardwareBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GadgeteerHardware domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x75fd3552, 0xc538, 0x45c0, 0xba, 0xf6, 0x45, 0x55, 0xaf, 0xa0, 0x84, 0x58);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected GadgeteerHardwareBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CachedDefinition domain property code
		
		/// <summary>
		/// CachedDefinition domain property Id.
		/// </summary>
		public static readonly global::System.Guid CachedDefinitionDomainPropertyId = new global::System.Guid(0xca915efb, 0xf1a0, 0x4746, 0xb8, 0xf4, 0x7f, 0x04, 0x44, 0x83, 0xc1, 0xa3);
		
		/// <summary>
		/// Storage for CachedDefinition
		/// </summary>
		private global::System.String cachedDefinitionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CachedDefinition domain property.
		/// Description for Microsoft.Gadgeteer.Designer.GadgeteerHardware.Cached Definition
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerHardware/CachedDefinition.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerHardware/CachedDefinition.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("ca915efb-f1a0-4746-b8f4-7f044483c1a3")]
		public global::System.String CachedDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cachedDefinitionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				CachedDefinitionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the GadgeteerHardware.CachedDefinition domain property.
		/// </summary>
		internal sealed partial class CachedDefinitionPropertyHandler : DslModeling::DomainPropertyValueHandler<GadgeteerHardwareBase, global::System.String>
		{
			private CachedDefinitionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the GadgeteerHardware.CachedDefinition domain property value handler.
			/// </summary>
			public static readonly CachedDefinitionPropertyHandler Instance = new CachedDefinitionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the GadgeteerHardware.CachedDefinition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CachedDefinitionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(GadgeteerHardwareBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cachedDefinitionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(GadgeteerHardwareBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cachedDefinitionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GadgeteerModel opposite domain role accessor
		/// <summary>
		/// Gets or sets GadgeteerModel.
		/// Description for
		/// Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerHardware
		/// </summary>
		public virtual GadgeteerModel GadgeteerModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerHardwareDomainRoleId) as GadgeteerModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerHardwareDomainRoleId, value);
			}
		}
		#endregion
		#region Sockets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sockets.
		/// Description for
		/// Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.GadgeteerHardware
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Socket> Sockets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Socket>, Socket>(global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.GadgeteerHardwareDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Gadgeteer.Designer.Socket.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Gadgeteer.Designer.Socket sourceSocket1 = sourceElement as global::Microsoft.Gadgeteer.Designer.Socket;
			if (sourceSocket1 != null)
			{
				// Create link for path GadgeteerHardwareHasSockets.Sockets
				this.Sockets.Add(sourceSocket1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Gadgeteer.Designer.Socket sourceSocket1 = sourceElement as global::Microsoft.Gadgeteer.Designer.Socket;
			if (sourceSocket1 != null)
			{
				// Delete link for path GadgeteerHardwareHasSockets.Sockets
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.GetLinks((global::Microsoft.Gadgeteer.Designer.GadgeteerHardware)this, sourceSocket1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.GadgeteerHardwareDomainRoleId, global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.SocketDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass GadgeteerHardware
	/// Description for Microsoft.Gadgeteer.Designer.GadgeteerHardware
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public abstract partial class GadgeteerHardware : GadgeteerHardwareBase
	{
		#region Constructors
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected GadgeteerHardware(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainClass SocketBase
	/// Description for Microsoft.Gadgeteer.Designer.SocketBase
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.SocketBase.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.SocketBase.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c1960a79-77fe-4306-9b84-d3b5e785e75f")]
	public abstract partial class SocketBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SocketBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc1960a79, 0x77fe, 0x4306, 0x9b, 0x84, 0xd3, 0xb5, 0xe7, 0x85, 0xe7, 0x5f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SocketBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Comment.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Comment.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("986d4bd7-4766-46d2-b9d4-db1f3eaac7c8")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x986d4bd7, 0x4766, 0x46d2, 0xb9, 0xd4, 0xdb, 0x1f, 0x3e, 0xaa, 0xc7, 0xc8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xc8cf4fa5, 0xf9f0, 0x42d5, 0x83, 0xaf, 0xf7, 0xb4, 0xe4, 0x7e, 0x11, 0x92);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.Comment/Text.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.Comment/Text.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("c8cf4fa5-f9f0-42d5-83af-f7b4e47e1192")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GadgeteerModel opposite domain role accessor
		/// <summary>
		/// Gets or sets GadgeteerModel.
		/// Description for Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.Comment
		/// </summary>
		public virtual GadgeteerModel GadgeteerModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.CommentDomainRoleId) as GadgeteerModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
	}
}
