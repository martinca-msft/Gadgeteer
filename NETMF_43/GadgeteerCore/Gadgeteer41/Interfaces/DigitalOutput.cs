// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache v.2 license.
namespace Gadgeteer.Interfaces
{
    using System;
    using Microsoft.SPOT;
    using Microsoft.SPOT.Hardware;
    using Gadgeteer.Modules;
    /// <summary>
    /// Represents digital output on a single pin.
    /// </summary>
    public class DigitalOutput
    {
        private OutputPort port;

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socket">The socket for the digital output interface.</param>
        /// <param name="pin">The pin used by the digital output interface.</param>
        /// <param name="initialState">The initial state to place on the digital output interface port.</param>
        /// <param name="module">The module using this interface (which can be null if unspecified).</param>
        public DigitalOutput(Socket socket, Socket.Pin pin, bool initialState, Module module)
        {
            this.port = new OutputPort(socket.ReservePin(pin, module), initialState);

            if (this.port == null)
            {
                // this is a mainboard error but should not happen since we check for this, but it doesnt hurt to double-check
                throw new Socket.InvalidSocketException("Socket " + socket + " has an error with its Digital Output functionality. Please try a different socket.");
            }
        }

        /// <summary>
        /// Writes a value to the interface port output. 
        /// </summary>
        /// <param name="state">The value to be written to the port output.</param>
        public void Write(bool state)
        {
            this.port.Write(state);
        }

        /// <summary>
        /// Reads a Boolean value at the interface port input. 
        /// </summary>
        /// <returns>The current value of the port (either 0 or 1).</returns>
        public bool Read()
        {
            return this.port.Read();
        }
    }
}
