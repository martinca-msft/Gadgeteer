//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainModel GadgeteerDSLDomainModel
	/// Description for Microsoft.Gadgeteer.Designer.GadgeteerDSL
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("b860f50b-5cad-4f39-8f02-2e438befbe65")]
	public partial class GadgeteerDSLDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// GadgeteerDSLDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0xb860f50b, 0x5cad, 0x4f39, 0x8f, 0x02, 0x2e, 0x43, 0x8b, 0xef, 0xbe, 0x65);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public GadgeteerDSLDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(GadgeteerModel),
				typeof(Mainboard),
				typeof(Module),
				typeof(Socket),
				typeof(SocketUse),
				typeof(GadgeteerHardware),
				typeof(SocketBase),
				typeof(Comment),
				typeof(ModuleHasSocketUses),
				typeof(SocketUseReferencesSocket),
				typeof(GadgeteerModelHasGadgeteerHardware),
				typeof(GadgeteerHardwareHasSockets),
				typeof(GadgeteerModelHasComments),
				typeof(GadgeteerDSLDiagram),
				typeof(SocketConnector),
				typeof(GadgeteerHardwareShape),
				typeof(SocketShape),
				typeof(ModuleShape),
				typeof(MainboardShape),
				typeof(SocketUseShape),
				typeof(SocketShapeBase),
				typeof(CommentBoxShape),
				typeof(global::Microsoft.Gadgeteer.Designer.FixUpDiagram),
				typeof(global::Microsoft.Gadgeteer.Designer.DecoratorPropertyChanged),
				typeof(global::Microsoft.Gadgeteer.Designer.ConnectorRolePlayerChanged),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(GadgeteerModel), "NewModel", GadgeteerModel.NewModelDomainPropertyId, typeof(GadgeteerModel.NewModelPropertyHandler)),
				new DomainMemberInfo(typeof(Mainboard), "Name", Mainboard.NameDomainPropertyId, typeof(Mainboard.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Module), "Name", Module.NameDomainPropertyId, typeof(Module.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Module), "ModuleType", Module.ModuleTypeDomainPropertyId, typeof(Module.ModuleTypePropertyHandler)),
				new DomainMemberInfo(typeof(Module), "ModuleDefinitionId", Module.ModuleDefinitionIdDomainPropertyId, typeof(Module.ModuleDefinitionIdPropertyHandler)),
				new DomainMemberInfo(typeof(Module), "NetMicroFrameworkAssembly", Module.NetMicroFrameworkAssemblyDomainPropertyId, typeof(Module.NetMicroFrameworkAssemblyPropertyHandler)),
				new DomainMemberInfo(typeof(Module), "Manufacturer", Module.ManufacturerDomainPropertyId, typeof(Module.ManufacturerPropertyHandler)),
				new DomainMemberInfo(typeof(Module), "Type", Module.TypeDomainPropertyId, typeof(Module.TypePropertyHandler)),
				new DomainMemberInfo(typeof(Socket), "Label", Socket.LabelDomainPropertyId, typeof(Socket.LabelPropertyHandler)),
				new DomainMemberInfo(typeof(SocketUse), "Label", SocketUse.LabelDomainPropertyId, typeof(SocketUse.LabelPropertyHandler)),
				new DomainMemberInfo(typeof(SocketUse), "Optional", SocketUse.OptionalDomainPropertyId, typeof(SocketUse.OptionalPropertyHandler)),
				new DomainMemberInfo(typeof(GadgeteerHardware), "CachedDefinition", GadgeteerHardware.CachedDefinitionDomainPropertyId, typeof(GadgeteerHardware.CachedDefinitionPropertyHandler)),
				new DomainMemberInfo(typeof(Comment), "Text", Comment.TextDomainPropertyId, typeof(Comment.TextPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(ModuleHasSocketUses), "Module", ModuleHasSocketUses.ModuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModuleHasSocketUses), "SocketUse", ModuleHasSocketUses.SocketUseDomainRoleId),
				new DomainRolePlayerInfo(typeof(SocketUseReferencesSocket), "SocketUse", SocketUseReferencesSocket.SocketUseDomainRoleId),
				new DomainRolePlayerInfo(typeof(SocketUseReferencesSocket), "Socket", SocketUseReferencesSocket.SocketDomainRoleId),
				new DomainRolePlayerInfo(typeof(GadgeteerModelHasGadgeteerHardware), "GadgeteerModel", GadgeteerModelHasGadgeteerHardware.GadgeteerModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(GadgeteerModelHasGadgeteerHardware), "GadgeteerHardware", GadgeteerModelHasGadgeteerHardware.GadgeteerHardwareDomainRoleId),
				new DomainRolePlayerInfo(typeof(GadgeteerHardwareHasSockets), "GadgeteerHardware", GadgeteerHardwareHasSockets.GadgeteerHardwareDomainRoleId),
				new DomainRolePlayerInfo(typeof(GadgeteerHardwareHasSockets), "Socket", GadgeteerHardwareHasSockets.SocketDomainRoleId),
				new DomainRolePlayerInfo(typeof(GadgeteerModelHasComments), "GadgeteerModel", GadgeteerModelHasComments.GadgeteerModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(GadgeteerModelHasComments), "Comment", GadgeteerModelHasComments.CommentDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(17);
				createElementMap.Add(typeof(GadgeteerModel), 0);
				createElementMap.Add(typeof(Mainboard), 1);
				createElementMap.Add(typeof(Module), 2);
				createElementMap.Add(typeof(Socket), 3);
				createElementMap.Add(typeof(SocketUse), 4);
				createElementMap.Add(typeof(Comment), 5);
				createElementMap.Add(typeof(GadgeteerDSLDiagram), 6);
				createElementMap.Add(typeof(SocketConnector), 7);
				createElementMap.Add(typeof(GadgeteerHardwareShape), 8);
				createElementMap.Add(typeof(SocketShape), 9);
				createElementMap.Add(typeof(ModuleShape), 10);
				createElementMap.Add(typeof(MainboardShape), 11);
				createElementMap.Add(typeof(SocketUseShape), 12);
				createElementMap.Add(typeof(SocketShapeBase), 13);
				createElementMap.Add(typeof(CommentBoxShape), 14);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new GadgeteerModel(partition, propertyAssignments);
				case 1: return new Mainboard(partition, propertyAssignments);
				case 2: return new Module(partition, propertyAssignments);
				case 3: return new Socket(partition, propertyAssignments);
				case 4: return new SocketUse(partition, propertyAssignments);
				case 5: return new Comment(partition, propertyAssignments);
				case 6: return new GadgeteerDSLDiagram(partition, propertyAssignments);
				case 7: return new SocketConnector(partition, propertyAssignments);
				case 8: return new GadgeteerHardwareShape(partition, propertyAssignments);
				case 9: return new SocketShape(partition, propertyAssignments);
				case 10: return new ModuleShape(partition, propertyAssignments);
				case 11: return new MainboardShape(partition, propertyAssignments);
				case 12: return new SocketUseShape(partition, propertyAssignments);
				case 13: return new SocketShapeBase(partition, propertyAssignments);
				case 14: return new CommentBoxShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(5);
				createElementLinkMap.Add(typeof(ModuleHasSocketUses), 0);
				createElementLinkMap.Add(typeof(SocketUseReferencesSocket), 1);
				createElementLinkMap.Add(typeof(GadgeteerModelHasGadgeteerHardware), 2);
				createElementLinkMap.Add(typeof(GadgeteerHardwareHasSockets), 3);
				createElementLinkMap.Add(typeof(GadgeteerModelHasComments), 4);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new ModuleHasSocketUses(partition, roleAssignments, propertyAssignments);
				case 1: return new SocketUseReferencesSocket(partition, roleAssignments, propertyAssignments);
				case 2: return new GadgeteerModelHasGadgeteerHardware(partition, roleAssignments, propertyAssignments);
				case 3: return new GadgeteerHardwareHasSockets(partition, roleAssignments, propertyAssignments);
				case 4: return new GadgeteerModelHasComments(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GadgeteerDSLDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (GadgeteerDSLDomainModel.resourceManager == null)
				{
					GadgeteerDSLDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(GadgeteerDSLDomainModel).Assembly);
				}
				return GadgeteerDSLDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return GadgeteerDSLDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return GadgeteerDSLDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (GadgeteerDSLDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new GadgeteerDSLCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					GadgeteerDSLDomainModel.copyClosure = copyFilter;
				}
				return GadgeteerDSLDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (GadgeteerDSLDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new GadgeteerDSLDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					GadgeteerDSLDomainModel.removeClosure = removeFilter;
				}
				return GadgeteerDSLDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Microsoft.Gadgeteer.Designer.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Microsoft.Gadgeteer.Designer.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::Microsoft.Gadgeteer.Designer.ConnectorRolePlayerChanged));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Microsoft.Gadgeteer.Designer.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Microsoft.Gadgeteer.Designer.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::Microsoft.Gadgeteer.Designer.ConnectorRolePlayerChanged));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class GadgeteerDSLDeleteClosure : GadgeteerDSLDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public GadgeteerDSLDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class GadgeteerDSLDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public GadgeteerDSLDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.SocketUseDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerHardwareDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.SocketDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.CommentDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class GadgeteerDSLCopyClosure : GadgeteerDSLCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public GadgeteerDSLCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class GadgeteerDSLCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public GadgeteerDSLCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

