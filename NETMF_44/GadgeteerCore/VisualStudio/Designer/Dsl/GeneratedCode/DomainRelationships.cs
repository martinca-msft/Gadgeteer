//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainRelationship ModuleHasSocketUses
	/// Description for Microsoft.Gadgeteer.Designer.ModuleHasSocketUses
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0843f0b4-9e7a-4692-bea5-20d73c0da26b")]
	public partial class ModuleHasSocketUses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModuleHasSocketUses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0843f0b4, 0x9e7a, 0x4692, 0xbe, 0xa5, 0x20, 0xd7, 0x3c, 0x0d, 0xa2, 0x6b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModuleHasSocketUses link in the same Partition as the given Module
		/// </summary>
		/// <param name="source">Module to use as the source of the relationship.</param>
		/// <param name="target">SocketUse to use as the target of the relationship.</param>
		public ModuleHasSocketUses(Module source, SocketUse target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModuleHasSocketUses.ModuleDomainRoleId, source), new DslModeling::RoleAssignment(ModuleHasSocketUses.SocketUseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModuleHasSocketUses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModuleHasSocketUses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModuleHasSocketUses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModuleHasSocketUses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Module domain role code
		
		/// <summary>
		/// Module domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModuleDomainRoleId = new global::System.Guid(0xc45a062a, 0x3111, 0x4f57, 0xa2, 0x60, 0xce, 0x23, 0xfb, 0xdf, 0xbb, 0x5d);
		
		/// <summary>
		/// DomainRole Module
		/// Description for Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.Module
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.ModuleHasSocketUses/Module.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.ModuleHasSocketUses/Module.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SocketUses", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.ModuleHasSocketUses/Module.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c45a062a-3111-4f57-a260-ce23fbdfbb5d")]
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Module)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Module of a SocketUse
		/// <summary>
		/// Gets Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Module GetModule(SocketUse element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SocketUseDomainRoleId) as Module;
		}
		
		/// <summary>
		/// Sets Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModule(SocketUse element, Module newModule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SocketUseDomainRoleId, newModule);
		}
		#endregion
		#region SocketUse domain role code
		
		/// <summary>
		/// SocketUse domain role Id.
		/// </summary>
		public static readonly global::System.Guid SocketUseDomainRoleId = new global::System.Guid(0xe787aed6, 0xbc16, 0x4176, 0xac, 0x01, 0x96, 0x99, 0xac, 0x05, 0xe4, 0x4e);
		
		/// <summary>
		/// DomainRole SocketUse
		/// Description for Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.SocketUse
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.ModuleHasSocketUses/SocketUse.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.ModuleHasSocketUses/SocketUse.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Module", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.ModuleHasSocketUses/SocketUse.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e787aed6-bc16-4176-ac01-9699ac05e44e")]
		public virtual SocketUse SocketUse
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SocketUse)DslModeling::DomainRoleInfo.GetRolePlayer(this, SocketUseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SocketUseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SocketUses of a Module
		/// <summary>
		/// Gets a list of SocketUses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SocketUse> GetSocketUses(Module element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SocketUse>, SocketUse>(element, ModuleDomainRoleId);
		}
		#endregion
		#region Module link accessor
		/// <summary>
		/// Get the list of ModuleHasSocketUses links to a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses> GetLinksToSocketUses ( global::Microsoft.Gadgeteer.Designer.Module moduleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses>(moduleInstance, global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.ModuleDomainRoleId);
		}
		#endregion
		#region SocketUse link accessor
		/// <summary>
		/// Get the ModuleHasSocketUses link to a SocketUse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses GetLinkToModule (global::Microsoft.Gadgeteer.Designer.SocketUse socketUseInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses>(socketUseInstance, global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.SocketUseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SocketUse not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModuleHasSocketUses instance accessors
		
		/// <summary>
		/// Get any ModuleHasSocketUses links between a given Module and a SocketUse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses> GetLinks( global::Microsoft.Gadgeteer.Designer.Module source, global::Microsoft.Gadgeteer.Designer.SocketUse target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses>();
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses>(source, global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.ModuleDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses link in links )
			{
				if ( target.Equals(link.SocketUse) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModuleHasSocketUses link between a given Moduleand a SocketUse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses GetLink( global::Microsoft.Gadgeteer.Designer.Module source, global::Microsoft.Gadgeteer.Designer.SocketUse target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses>(source, global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses.ModuleDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.ModuleHasSocketUses link in links )
			{
				if ( target.Equals(link.SocketUse) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainRelationship SocketUseReferencesSocket
	/// Description for Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d100822f-5c6f-48c1-9453-7d744ec6067b")]
	public partial class SocketUseReferencesSocket : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SocketUseReferencesSocket domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd100822f, 0x5c6f, 0x48c1, 0x94, 0x53, 0x7d, 0x74, 0x4e, 0xc6, 0x06, 0x7b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SocketUseReferencesSocket link in the same Partition as the given SocketUse
		/// </summary>
		/// <param name="source">SocketUse to use as the source of the relationship.</param>
		/// <param name="target">Socket to use as the target of the relationship.</param>
		public SocketUseReferencesSocket(SocketUse source, Socket target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SocketUseReferencesSocket.SocketUseDomainRoleId, source), new DslModeling::RoleAssignment(SocketUseReferencesSocket.SocketDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SocketUseReferencesSocket(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SocketUseReferencesSocket(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SocketUseReferencesSocket(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SocketUseReferencesSocket(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SocketUse domain role code
		
		/// <summary>
		/// SocketUse domain role Id.
		/// </summary>
		public static readonly global::System.Guid SocketUseDomainRoleId = new global::System.Guid(0xa67bb246, 0x2606, 0x48ed, 0x87, 0xd9, 0x19, 0xf4, 0x2b, 0xae, 0x6b, 0x69);
		
		/// <summary>
		/// DomainRole SocketUse
		/// Description for Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketUse
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket/SocketUse.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket/SocketUse.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Socket", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket/SocketUse.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a67bb246-2606-48ed-87d9-19f42bae6b69")]
		public virtual SocketUse SocketUse
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SocketUse)DslModeling::DomainRoleInfo.GetRolePlayer(this, SocketUseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SocketUseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SocketUse of a Socket
		/// <summary>
		/// Gets SocketUse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SocketUse GetSocketUse(Socket element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SocketDomainRoleId) as SocketUse;
		}
		
		/// <summary>
		/// Sets SocketUse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSocketUse(Socket element, SocketUse newSocketUse)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SocketDomainRoleId, newSocketUse);
		}
		#endregion
		#region Socket domain role code
		
		/// <summary>
		/// Socket domain role Id.
		/// </summary>
		public static readonly global::System.Guid SocketDomainRoleId = new global::System.Guid(0x97dd8fc5, 0x90ab, 0x4352, 0xb9, 0x85, 0x6b, 0x9a, 0x0e, 0x8e, 0x73, 0x08);
		
		/// <summary>
		/// DomainRole Socket
		/// Description for Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.Socket
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket/Socket.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket/Socket.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SocketUse", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket/Socket.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("97dd8fc5-90ab-4352-b985-6b9a0e8e7308")]
		public virtual Socket Socket
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Socket)DslModeling::DomainRoleInfo.GetRolePlayer(this, SocketDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SocketDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Socket of a SocketUse
		/// <summary>
		/// Gets Socket.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Socket GetSocket(SocketUse element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SocketUseDomainRoleId) as Socket;
		}
		
		/// <summary>
		/// Sets Socket.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSocket(SocketUse element, Socket newSocket)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SocketUseDomainRoleId, newSocket);
		}
		#endregion
		#region SocketUse link accessor
		/// <summary>
		/// Get the SocketUseReferencesSocket link to a SocketUse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket GetLinkToSocket (global::Microsoft.Gadgeteer.Designer.SocketUse socketUseInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket>(socketUseInstance, global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketUseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SocketUse not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Socket link accessor
		/// <summary>
		/// Get the SocketUseReferencesSocket link to a Socket.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket GetLinkToSocketUse (global::Microsoft.Gadgeteer.Designer.Socket socketInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket>(socketInstance, global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Socket not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SocketUseReferencesSocket instance accessors
		
		/// <summary>
		/// Get any SocketUseReferencesSocket links between a given SocketUse and a Socket.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket> GetLinks( global::Microsoft.Gadgeteer.Designer.SocketUse source, global::Microsoft.Gadgeteer.Designer.Socket target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket>();
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket>(source, global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketUseDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket link in links )
			{
				if ( target.Equals(link.Socket) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SocketUseReferencesSocket link between a given SocketUseand a Socket.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket GetLink( global::Microsoft.Gadgeteer.Designer.SocketUse source, global::Microsoft.Gadgeteer.Designer.Socket target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket>(source, global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket.SocketUseDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.SocketUseReferencesSocket link in links )
			{
				if ( target.Equals(link.Socket) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainRelationship GadgeteerModelHasGadgeteerHardware
	/// Description for Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1889ca25-4789-4e56-9489-170e21757848")]
	public partial class GadgeteerModelHasGadgeteerHardware : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GadgeteerModelHasGadgeteerHardware domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1889ca25, 0x4789, 0x4e56, 0x94, 0x89, 0x17, 0x0e, 0x21, 0x75, 0x78, 0x48);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GadgeteerModelHasGadgeteerHardware link in the same Partition as the given GadgeteerModel
		/// </summary>
		/// <param name="source">GadgeteerModel to use as the source of the relationship.</param>
		/// <param name="target">GadgeteerHardware to use as the target of the relationship.</param>
		public GadgeteerModelHasGadgeteerHardware(GadgeteerModel source, GadgeteerHardware target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GadgeteerModelHasGadgeteerHardware.GadgeteerModelDomainRoleId, source), new DslModeling::RoleAssignment(GadgeteerModelHasGadgeteerHardware.GadgeteerHardwareDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GadgeteerModelHasGadgeteerHardware(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GadgeteerModelHasGadgeteerHardware(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GadgeteerModelHasGadgeteerHardware(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GadgeteerModelHasGadgeteerHardware(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GadgeteerModel domain role code
		
		/// <summary>
		/// GadgeteerModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid GadgeteerModelDomainRoleId = new global::System.Guid(0x24f42c48, 0x104f, 0x40e9, 0x94, 0x0b, 0x6d, 0xb3, 0xf0, 0x52, 0xa0, 0x13);
		
		/// <summary>
		/// DomainRole GadgeteerModel
		/// Description for
		/// Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware/GadgeteerModel.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware/GadgeteerModel.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "GadgeteerHardware", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware/GadgeteerModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("24f42c48-104f-40e9-940b-6db3f052a013")]
		public virtual GadgeteerModel GadgeteerModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GadgeteerModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, GadgeteerModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GadgeteerModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GadgeteerModel of a GadgeteerHardware
		/// <summary>
		/// Gets GadgeteerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GadgeteerModel GetGadgeteerModel(GadgeteerHardware element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GadgeteerHardwareDomainRoleId) as GadgeteerModel;
		}
		
		/// <summary>
		/// Sets GadgeteerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGadgeteerModel(GadgeteerHardware element, GadgeteerModel newGadgeteerModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GadgeteerHardwareDomainRoleId, newGadgeteerModel);
		}
		#endregion
		#region GadgeteerHardware domain role code
		
		/// <summary>
		/// GadgeteerHardware domain role Id.
		/// </summary>
		public static readonly global::System.Guid GadgeteerHardwareDomainRoleId = new global::System.Guid(0x546995b5, 0x0dd2, 0x41e4, 0xa0, 0x39, 0x61, 0x87, 0x4f, 0xe4, 0xed, 0x9d);
		
		/// <summary>
		/// DomainRole GadgeteerHardware
		/// Description for
		/// Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerHardware
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware/GadgeteerHardware.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware/GadgeteerHardware.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GadgeteerModel", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware/GadgeteerHardware.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("546995b5-0dd2-41e4-a039-61874fe4ed9d")]
		public virtual GadgeteerHardware GadgeteerHardware
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GadgeteerHardware)DslModeling::DomainRoleInfo.GetRolePlayer(this, GadgeteerHardwareDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GadgeteerHardwareDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GadgeteerHardware of a GadgeteerModel
		/// <summary>
		/// Gets a list of GadgeteerHardware.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<GadgeteerHardware> GetGadgeteerHardware(GadgeteerModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<GadgeteerHardware>, GadgeteerHardware>(element, GadgeteerModelDomainRoleId);
		}
		#endregion
		#region GadgeteerModel link accessor
		/// <summary>
		/// Get the list of GadgeteerModelHasGadgeteerHardware links to a GadgeteerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware> GetLinksToGadgeteerHardware ( global::Microsoft.Gadgeteer.Designer.GadgeteerModel gadgeteerModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware>(gadgeteerModelInstance, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerModelDomainRoleId);
		}
		#endregion
		#region GadgeteerHardware link accessor
		/// <summary>
		/// Get the GadgeteerModelHasGadgeteerHardware link to a GadgeteerHardware.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware GetLinkToGadgeteerModel (global::Microsoft.Gadgeteer.Designer.GadgeteerHardware gadgeteerHardwareInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware>(gadgeteerHardwareInstance, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerHardwareDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GadgeteerHardware not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GadgeteerModelHasGadgeteerHardware instance accessors
		
		/// <summary>
		/// Get any GadgeteerModelHasGadgeteerHardware links between a given GadgeteerModel and a GadgeteerHardware.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware> GetLinks( global::Microsoft.Gadgeteer.Designer.GadgeteerModel source, global::Microsoft.Gadgeteer.Designer.GadgeteerHardware target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware>();
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware>(source, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerModelDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware link in links )
			{
				if ( target.Equals(link.GadgeteerHardware) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GadgeteerModelHasGadgeteerHardware link between a given GadgeteerModeland a GadgeteerHardware.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware GetLink( global::Microsoft.Gadgeteer.Designer.GadgeteerModel source, global::Microsoft.Gadgeteer.Designer.GadgeteerHardware target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware>(source, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware.GadgeteerModelDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasGadgeteerHardware link in links )
			{
				if ( target.Equals(link.GadgeteerHardware) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainRelationship GadgeteerHardwareHasSockets
	/// Description for Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f79ba18d-1935-41ed-b7b2-3ec88740823c")]
	public partial class GadgeteerHardwareHasSockets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GadgeteerHardwareHasSockets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf79ba18d, 0x1935, 0x41ed, 0xb7, 0xb2, 0x3e, 0xc8, 0x87, 0x40, 0x82, 0x3c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GadgeteerHardwareHasSockets link in the same Partition as the given GadgeteerHardware
		/// </summary>
		/// <param name="source">GadgeteerHardware to use as the source of the relationship.</param>
		/// <param name="target">Socket to use as the target of the relationship.</param>
		public GadgeteerHardwareHasSockets(GadgeteerHardware source, Socket target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GadgeteerHardwareHasSockets.GadgeteerHardwareDomainRoleId, source), new DslModeling::RoleAssignment(GadgeteerHardwareHasSockets.SocketDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GadgeteerHardwareHasSockets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GadgeteerHardwareHasSockets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GadgeteerHardwareHasSockets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GadgeteerHardwareHasSockets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GadgeteerHardware domain role code
		
		/// <summary>
		/// GadgeteerHardware domain role Id.
		/// </summary>
		public static readonly global::System.Guid GadgeteerHardwareDomainRoleId = new global::System.Guid(0xfd7faa8c, 0x09a2, 0x40e0, 0xbf, 0x4a, 0xb3, 0x12, 0x36, 0x85, 0x6b, 0x7b);
		
		/// <summary>
		/// DomainRole GadgeteerHardware
		/// Description for
		/// Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.GadgeteerHardware
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets/GadgeteerHardware.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets/GadgeteerHardware.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Sockets", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets/GadgeteerHardware.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fd7faa8c-09a2-40e0-bf4a-b31236856b7b")]
		public virtual GadgeteerHardware GadgeteerHardware
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GadgeteerHardware)DslModeling::DomainRoleInfo.GetRolePlayer(this, GadgeteerHardwareDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GadgeteerHardwareDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GadgeteerHardware of a Socket
		/// <summary>
		/// Gets GadgeteerHardware.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GadgeteerHardware GetGadgeteerHardware(Socket element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SocketDomainRoleId) as GadgeteerHardware;
		}
		
		/// <summary>
		/// Sets GadgeteerHardware.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGadgeteerHardware(Socket element, GadgeteerHardware newGadgeteerHardware)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SocketDomainRoleId, newGadgeteerHardware);
		}
		#endregion
		#region Socket domain role code
		
		/// <summary>
		/// Socket domain role Id.
		/// </summary>
		public static readonly global::System.Guid SocketDomainRoleId = new global::System.Guid(0x8a450cb2, 0x6aa7, 0x41bf, 0xa4, 0x95, 0x62, 0x69, 0x6b, 0xeb, 0x06, 0xaf);
		
		/// <summary>
		/// DomainRole Socket
		/// Description for Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.Socket
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets/Socket.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets/Socket.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GadgeteerHardware", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets/Socket.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8a450cb2-6aa7-41bf-a495-62696beb06af")]
		public virtual Socket Socket
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Socket)DslModeling::DomainRoleInfo.GetRolePlayer(this, SocketDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SocketDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sockets of a GadgeteerHardware
		/// <summary>
		/// Gets a list of Sockets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Socket> GetSockets(GadgeteerHardware element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Socket>, Socket>(element, GadgeteerHardwareDomainRoleId);
		}
		#endregion
		#region GadgeteerHardware link accessor
		/// <summary>
		/// Get the list of GadgeteerHardwareHasSockets links to a GadgeteerHardware.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets> GetLinksToSockets ( global::Microsoft.Gadgeteer.Designer.GadgeteerHardware gadgeteerHardwareInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets>(gadgeteerHardwareInstance, global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.GadgeteerHardwareDomainRoleId);
		}
		#endregion
		#region Socket link accessor
		/// <summary>
		/// Get the GadgeteerHardwareHasSockets link to a Socket.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets GetLinkToGadgeteerHardware (global::Microsoft.Gadgeteer.Designer.Socket socketInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets>(socketInstance, global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.SocketDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Socket not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GadgeteerHardwareHasSockets instance accessors
		
		/// <summary>
		/// Get any GadgeteerHardwareHasSockets links between a given GadgeteerHardware and a Socket.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets> GetLinks( global::Microsoft.Gadgeteer.Designer.GadgeteerHardware source, global::Microsoft.Gadgeteer.Designer.Socket target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets>();
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets>(source, global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.GadgeteerHardwareDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets link in links )
			{
				if ( target.Equals(link.Socket) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GadgeteerHardwareHasSockets link between a given GadgeteerHardwareand a Socket.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets GetLink( global::Microsoft.Gadgeteer.Designer.GadgeteerHardware source, global::Microsoft.Gadgeteer.Designer.Socket target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets>(source, global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets.GadgeteerHardwareDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.GadgeteerHardwareHasSockets link in links )
			{
				if ( target.Equals(link.Socket) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Gadgeteer.Designer
{
	/// <summary>
	/// DomainRelationship GadgeteerModelHasComments
	/// Description for Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("24dd469b-78ec-4006-9774-c4fb5ae2dd1b")]
	public partial class GadgeteerModelHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GadgeteerModelHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x24dd469b, 0x78ec, 0x4006, 0x97, 0x74, 0xc4, 0xfb, 0x5a, 0xe2, 0xdd, 0x1b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GadgeteerModelHasComments link in the same Partition as the given GadgeteerModel
		/// </summary>
		/// <param name="source">GadgeteerModel to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public GadgeteerModelHasComments(GadgeteerModel source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GadgeteerModelHasComments.GadgeteerModelDomainRoleId, source), new DslModeling::RoleAssignment(GadgeteerModelHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GadgeteerModelHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GadgeteerModelHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GadgeteerModelHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GadgeteerModelHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GadgeteerModel domain role code
		
		/// <summary>
		/// GadgeteerModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid GadgeteerModelDomainRoleId = new global::System.Guid(0x7e215ff5, 0xb9d3, 0x4884, 0x82, 0xf2, 0xcd, 0x2c, 0xdd, 0x89, 0x7f, 0x5a);
		
		/// <summary>
		/// DomainRole GadgeteerModel
		/// Description for
		/// Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.GadgeteerModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments/GadgeteerModel.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments/GadgeteerModel.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments/GadgeteerModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7e215ff5-b9d3-4884-82f2-cd2cdd897f5a")]
		public virtual GadgeteerModel GadgeteerModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GadgeteerModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, GadgeteerModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GadgeteerModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GadgeteerModel of a Comment
		/// <summary>
		/// Gets GadgeteerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GadgeteerModel GetGadgeteerModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as GadgeteerModel;
		}
		
		/// <summary>
		/// Sets GadgeteerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGadgeteerModel(Comment element, GadgeteerModel newGadgeteerModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newGadgeteerModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x89705449, 0xb1a9, 0x4b00, 0x97, 0x7c, 0x36, 0xab, 0x49, 0x0e, 0xad, 0x3a);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments/Comment.DisplayName", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments/Comment.Description", typeof(global::Microsoft.Gadgeteer.Designer.GadgeteerDSLDomainModel), "Microsoft.Gadgeteer.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GadgeteerModel", PropertyDisplayNameKey="Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("89705449-b1a9-4b00-977c-36ab490ead3a")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a GadgeteerModel
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(GadgeteerModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, GadgeteerModelDomainRoleId);
		}
		#endregion
		#region GadgeteerModel link accessor
		/// <summary>
		/// Get the list of GadgeteerModelHasComments links to a GadgeteerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments> GetLinksToComments ( global::Microsoft.Gadgeteer.Designer.GadgeteerModel gadgeteerModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments>(gadgeteerModelInstance, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.GadgeteerModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the GadgeteerModelHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments GetLinkToGadgeteerModel (global::Microsoft.Gadgeteer.Designer.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments>(commentInstance, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GadgeteerModelHasComments instance accessors
		
		/// <summary>
		/// Get any GadgeteerModelHasComments links between a given GadgeteerModel and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments> GetLinks( global::Microsoft.Gadgeteer.Designer.GadgeteerModel source, global::Microsoft.Gadgeteer.Designer.Comment target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments>();
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments>(source, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.GadgeteerModelDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GadgeteerModelHasComments link between a given GadgeteerModeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments GetLink( global::Microsoft.Gadgeteer.Designer.GadgeteerModel source, global::Microsoft.Gadgeteer.Designer.Comment target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments>(source, global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments.GadgeteerModelDomainRoleId);
			foreach ( global::Microsoft.Gadgeteer.Designer.GadgeteerModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
